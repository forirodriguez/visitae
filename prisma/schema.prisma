// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tipos principales basados en los tipos existentes

model Property {
  id           String   @id @default(cuid())
  title        String
  price        Float
  location     String
  image        String
  bedrooms     Int
  bathrooms    Int
  area         Int
  type         String // "venta" | "alquiler"
  description  String   @db.Text
  propertyType String
  address      String
  features     String[] // Guardamos como array de strings
  status       String // "publicada" | "borrador" | "destacada" | "inactiva"
  isNew        Boolean  @default(false)
  isFeatured   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  visits       Visit[]

  User User[] @relation("AgentProperties")

  AgentProperty AgentProperty[]
}

model Visit {
  id        String   @id @default(cuid())
  date      DateTime
  time      String
  type      String // "presencial" | "videollamada"
  status    String // "pendiente" | "confirmada" | "cancelada" | "completada"
  notes     String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
  agent      User?    @relation("AgentVisits", fields: [agentId], references: [id])
  agentId    String?
  client     User     @relation("ClientVisits", fields: [clientId], references: [id])
  clientId   String
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String? // Hash de la contraseña
  phone     String?
  avatarUrl String?
  role      String // "admin" | "superadmin" | "agent" | "client"
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  agentVisits  Visit[] @relation("AgentVisits")
  clientVisits Visit[] @relation("ClientVisits")

  // Para agentes
  properties Property[] @relation("AgentProperties")

  // Relación para NextAuth
  accounts Account[]
  sessions Session[]

  AgentProperty AgentProperty[]
}

// Modelos necesarios para NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Relaciones adicionales
model AgentAvailability {
  id       String @id @default(cuid())
  agentId  String @unique
  weekData Json // Guardamos la disponibilidad semanal como JSON

  @@index([agentId])
}

// Definimos una tabla adicional para conectar agentes con propiedades
model AgentProperty {
  id         String   @id @default(cuid())
  agentId    String
  propertyId String
  assignedAt DateTime @default(now())

  agent    User     @relation(fields: [agentId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@unique([agentId, propertyId])
}
